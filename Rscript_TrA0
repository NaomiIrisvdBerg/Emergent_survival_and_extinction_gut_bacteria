##Analysis of TrA0 Data & Medium composition Data

# Load necessary libraries:
# List of required packages
required_packages <- c(
  "ggplot2",
  "readr",
  "RcmdrMisc",
  "Hmisc",
  "multtest",
  "reshape2",
  "dplyr",
  "tidyr",
  "vegan",
  "igraph",
  "readxl",
  "tidyverse",
  "fontfamily",
  "scales",
  "ggsignif",
  "ggpubr",
  "edgeR",
  "stringr",
  "EnhancedVolcano",
  "data.table",
  "purrr",
  "gridExtra"
)

# Install and load required packages
for (package in required_packages) {
  if (!requireNamespace(package, quietly = TRUE)) {
    install.packages(package, dependencies = TRUE)
  }
  library(package, character.only = TRUE)
}






## Radial stacked plot on normalised medium composition, in order of total sum across component classes
## Plotted by Medium and coloured by Medium component classes

## Load in required dataframe: Compounds_Tramontano.csv, adopted from Tramontano et al. 2018

#First, load in unnormalised dataframe
Compounds_Tramontano <- read_csv("Documents/Compounds_Tramontano.csv")
#View(Compounds_Tramontano)
#Then, add 0 for NAs
Compounds_Tramontano[is.na(Compounds_Tramontano)] <- "0 mg"

convert_units <- function(x) {
  # Handle NA and non-character inputs
  if (is.na(x) || !is.character(x)) {
    return(NA_real_)
  }
  
  #Define regex patterns for numeric values and units
  numeric_pattern <- "[0-9.]+"
  unit_pattern <- "ug|µg|mg|g|mL"
  
  #Extract the numeric part and the unit part
  numeric_part <- as.numeric(str_extract(x, numeric_pattern))
  unit_part <- str_extract(x, unit_pattern)
  
  #If the numeric part extraction fails, return NA
  if (is.na(numeric_part)) {
    return(NA_real_)
  }
  
  #Perform conversion based on the unit part
  if (!is.na(unit_part)) {
    switch(unit_part,
           "g" = numeric_part * 1000,
           "ug" = numeric_part / 1000,
           "µg" = numeric_part / 1000,
           "mg" = numeric_part,
           "mL" = numeric_part,
           numeric_part  # default case
    )
  } else {
    #If the unit part extraction fails, return NA
    return(NA_real_)
  }
}

#Apply the conversion function to each column that starts with "M"
Compounds_Tramontano1 <- Compounds_Tramontano %>%
  rowwise() %>%
  dplyr::mutate(across(starts_with("M"), ~ convert_units(.x))) %>%
  ungroup()

#Replace NAs with zeros if necessary
Compounds_Tramontano1 <- Compounds_Tramontano1 %>%
  dplyr::mutate(across(starts_with("M"), ~ if_else(is.na(.x), 0, .x)))

#Check the structure to confirm the transformation
str(Compounds_Tramontano1)

#Normalise each value against maximum of each row
Compounds_Tramontano2 <- Compounds_Tramontano1 %>%
  dplyr::rowwise() %>%
  dplyr::mutate(across(starts_with("M"), ~ .x / max(c_across(starts_with("M")), na.rm = TRUE))) %>%
  ungroup()

head(Compounds_Tramontano2)

#Exclude buffer compounds
Compounds_Tramontano3 <- Compounds_Tramontano2[c(1:88),]

##Make mucin its own class
Compounds_Tramontano3$Class <- ifelse(Compounds_Tramontano3$Compound == "Mucin", "Mucin", Compounds_Tramontano3$Class)

#Calculate the sum of all 'M' columns for each unique class
Normalised_medium_components_summed_per_class <- Compounds_Tramontano3 %>%
  dplyr::group_by(Class) %>%
  dplyr::summarise(across(starts_with("M"), sum, na.rm = TRUE)) %>%
  ungroup()

head(Normalised_medium_components_summed_per_class)

#Divide by largest concentration per class:
Normalised_medium_components_summed_per_class1 <- Normalised_medium_components_summed_per_class %>%
  dplyr::rowwise() %>% 
  dplyr::mutate(max_value = max(c_across(starts_with('M')), na.rm = TRUE)) %>%
  dplyr::mutate(across(starts_with('M'), ~ ./max_value)) %>%
  select(-max_value) %>%
  dplyr::ungroup()

# View the resulting dataframe
print(Normalised_medium_components_summed_per_class1)

#Rename nucleotids to nucleotides
Normalised_medium_components_summed_per_class1 <- Normalised_medium_components_summed_per_class1 %>%
  dplyr::mutate(Class = ifelse(Class == "Nucleotids", "Nucleotides", Class))

color_scheme <- c("dodgerblue3", "#EF7A6C",  "lightskyblue","darkolivegreen1", "#C8A2C8", "ivory2", "darkturquoise", "goldenrod1")

# Pivot to longer format
Normalised_medium_components_summed_per_class_long <- Normalised_medium_components_summed_per_class1 %>%
  pivot_longer(
    cols = starts_with("M"), 
    names_to = "Medium", 
    values_to = "Value"
  )

# Ordered by total sum across component classes
ordered_medium <- rev(c("M8", "M9", "M3", "M11", "M4", "M7", "M10", "M5", "M2", "M1", "M14", "M16", "M13", "M15B"))

# Assign new variable 'Order' based on order defined above
Normalised_medium_components_summed_per_class_long$Order <- factor(Normalised_medium_components_summed_per_class_long$Medium, levels = ordered_medium)

stacked_radial_plot_medium_components <- ggplot(Normalised_medium_components_summed_per_class_long, aes(x = Order, y = Value, fill = Class)) +
  geom_bar(stat = "identity", position = "stack", alpha = 0.8, width = 1) +
  scale_x_discrete(labels = ordered_medium) +  # Use ordered_medium for x-axis labels
  scale_fill_manual(values = color_scheme) +
  coord_polar() +
  theme_void() +
  labs(fill = "Component") +
  theme(
    axis.text.x = element_text(angle = 30, hjust = 1),
    legend.text = element_text(size = 12)  # Increase legend text size
  )

stacked_radial_plot_medium_components







##Stability assembly, TrA0 
TrA0_relative_abundance <- read_delim("Downloads/TrA0_relative_abundance.txt", 
                                      delim = "\t", escape_double = FALSE, 
                                      trim_ws = TRUE)

#View(TrA0_relative_abundance)


TrA0_relative_abundance_table <- TrA0_relative_abundance[, c(1,2,63:115)]

## NT5028	 s__Bifidobacterium longum subsp. longum and NT5023	 s__Bifidobacterium longum subsp. infantis were indistinguishable by their 16S
## Hence, will need to be renamed to "s__Bifidobacterium longum spp."
TrA0_relative_abundance_table <- TrA0_relative_abundance_table %>%
  mutate(
    Name = ifelse(Name == 's__Bifidobacterium longum subsp. infantis', 's__Bifidobacterium longum spp.', Name),
    nid = ifelse(nid == 'NT5023', 'NT5023/NT5028', nid)
  )


##Clean up names of species (getting rid of square brackets and the species taxonomy delineation 's__')

#Remove 's__' from the beginning of each label in the "Name" column
TrA0_relative_abundance_table$Name <- gsub("^s__", "", TrA0_relative_abundance_table$Name)

#Remove square brackets from the labels in the "Name" column
TrA0_relative_abundance_table$Name <- gsub("\\[|\\]", "", TrA0_relative_abundance_table$Name)

#Prepare dataframe for transposing
TrA0_relative_abundance_table$Name <- gsub(" ", "_", TrA0_relative_abundance_table$Name)

TrA0_relative_abundance_table_t<-TrA0_relative_abundance_table[, c(2:55)]

#Transpose using tidyr

#First, pivot the dataframe to long format, excluding the first column ("Name")
long_format <- pivot_longer(
  TrA0_relative_abundance_table_t,
  cols = -Name,
  names_to = "Code",
  values_to = "Value"
)

#Then, pivot the long format dataframe to wide format using "Name" as the new column names
TrA0_relative_abundance_table_T <- pivot_wider(
  long_format,
  names_from = Name,
  values_from = Value
)


#Calculate Shannon alpha diversity (with handling for division by zero)

#Convert selected columns to a matrix
abundance_matrix <- as.matrix(TrA0_relative_abundance_table_T[, 2:32])

TrA0_relative_abundance_table_T$Alpha_diversity <- rowSums(ifelse(abundance_matrix != 0,
                                                                  abundance_matrix * log(abundance_matrix) * -1,
                                                                  0))

##Now, add Transfer, Medium, and Replicate columns based on the metadata in the column: "Code"
# We use stringr and dplyr here
TrA0_relative_abundance_table_T <- TrA0_relative_abundance_table_T %>%
  mutate(
    Transfer = as.integer(str_extract(Code, "(?<=T)\\d")),
    Medium = as.integer(str_extract(Code, "(?<=Med)\\d")),
    Replicate = as.integer(str_extract(Code, "\\d$"))
  )


#Now, we need to calculate the mean abundances and standard deviations for each combination of Transfer and Media:
TrA0_mean_abundances <- TrA0_relative_abundance_table_T %>%
  dplyr::group_by(Transfer, Medium) %>%
  dplyr::summarize(across(names(TrA0_relative_abundance_table_T)[2:33], mean, na.rm = TRUE))

TrA0_sd_abundances <- TrA0_relative_abundance_table_T %>%
  dplyr::group_by(Transfer, Medium) %>%
  dplyr::summarize(across(names(TrA0_relative_abundance_table_T)[2:33], sd, na.rm = TRUE))

# Rename the columns with the prefix "mean_" and "sd_"
colnames(TrA0_mean_abundances)[3:34] <- paste0("mean_", colnames(TrA0_mean_abundances)[3:34])
colnames(TrA0_sd_abundances)[3:34] <- paste0("sd_", colnames(TrA0_sd_abundances)[3:34])

##Subset by medium
TrA0_mean_abundances_M3 <- subset(TrA0_mean_abundances, Medium == 3)
TrA0_mean_abundances_M8 <- subset(TrA0_mean_abundances, Medium == 8)

TrA0_sd_abundances_M3 <- subset(TrA0_sd_abundances, Medium == 3)
TrA0_sd_abundances_M8 <- subset(TrA0_sd_abundances, Medium == 8)

#Remove columns for which all entries are 0 
TrA0_mean_abundances_M3_1 <- TrA0_mean_abundances_M3[, colSums(TrA0_mean_abundances_M3 != 0) > 0]
TrA0_mean_abundances_M8_1 <- TrA0_mean_abundances_M8[, colSums(TrA0_mean_abundances_M8 != 0) > 0]

TrA0_sd_abundances_M3_1 <- TrA0_sd_abundances_M3[, colSums(TrA0_mean_abundances_M3 != 0) > 0]
TrA0_sd_abundances_M8_1 <- TrA0_sd_abundances_M8[, colSums(TrA0_mean_abundances_M8 != 0) > 0]

#Transpose and remove Medium qualification, and remove then the mean_ from rownames
TrA0_mean_abundances_M3_1 <- subset(TrA0_mean_abundances_M3_1, select = -Medium)
TrA0_mean_abundances_M8_1 <- subset(TrA0_mean_abundances_M8_1, select = -Medium)

TrA0_sd_abundances_M3_1 <- subset(TrA0_sd_abundances_M3_1, select = -Medium)
TrA0_sd_abundances_M8_1 <- subset(TrA0_sd_abundances_M8_1, select = -Medium)


TrA0_mean_abundances_M3_T <- gather(TrA0_mean_abundances_M3_1, Species, mean_rel_abundance, -Transfer, na.rm = TRUE)
TrA0_mean_abundances_M3_T$Species <- gsub("mean_", "", TrA0_mean_abundances_M3_T$Species)
TrA0_mean_abundances_M3_t <- subset(TrA0_mean_abundances_M3_T, Species != "Alpha_diversity")

TrA0_sd_abundances_M3_T <- gather(TrA0_sd_abundances_M3_1, Species, sd_rel_abundance, -Transfer, na.rm = TRUE)
TrA0_sd_abundances_M3_T$Species <- gsub("sd_", "", TrA0_sd_abundances_M3_T$Species)

TrA0_mean_abundances_M8_T <- gather(TrA0_mean_abundances_M8_1, Species, mean_rel_abundance, -Transfer, na.rm = TRUE)
TrA0_mean_abundances_M8_T$Species <- gsub("mean_", "", TrA0_mean_abundances_M8_T$Species)
TrA0_mean_abundances_M8_t <- subset(TrA0_mean_abundances_M8_T, Species != "Alpha_diversity")

TrA0_sd_abundances_M8_T <- gather(TrA0_sd_abundances_M8_1, Species, sd_rel_abundance, -Transfer, na.rm = TRUE)
TrA0_sd_abundances_M8_T$Species <- gsub("sd_", "", TrA0_sd_abundances_M8_T$Species)


#Medium 3
alpha_div_mean <- subset(TrA0_mean_abundances_M3_T, Species == "Alpha_diversity")
alpha_div_sd <- subset(TrA0_sd_abundances_M3_T, Species == "Alpha_diversity")

alpha_div_data <- merge(alpha_div_mean, alpha_div_sd, by = c("Transfer", "Species"))

# Calculate the scaling factor
scaling_factor <- 1 / 1.85 # Here, 100 is the range of the primary axis and 1.85 is the range of the secondary axis (for M8, as plots will be merged)

TrA0_mean_abundances_M3_t$Species <- gsub("_", " ", TrA0_mean_abundances_M3_t$Species)


#Make the plot
ggplot() +
  geom_bar(data = TrA0_mean_abundances_M3_t, aes(x = as.numeric(Transfer), y = mean_rel_abundance, fill = Species), stat = "identity") +
  geom_point(data = alpha_div_data, aes(x = as.numeric(Transfer), y = mean_rel_abundance * scaling_factor), size = 3, shape = 21, color = "black") +
  geom_errorbar(data = alpha_div_data, 
                aes(x = as.numeric(Transfer),
                    ymin = (mean_rel_abundance - sd_rel_abundance) * scaling_factor, 
                    ymax = (mean_rel_abundance + sd_rel_abundance) * scaling_factor), 
                width = 0.2, color = "black") +
  scale_fill_manual(values=c("black", "#E69F00", "#56B4E9", "magenta", "green", 
                                    "#0072B2", "indianred", "gold1", "firebrick4", "#009E73", 
                                    "chocolate1","cyan", "red", "lightgrey", "darkorchid1",
                                    "#CC79A7", "mediumpurple", "aquamarine", "darkgreen","#2e37fe", 
                                    "lightblue", "tan3", "#00AFBB", "red3", 
                                    "navyblue")) +
                                      scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9)) +
  scale_y_continuous(limits = c(0, 1.05), sec.axis = sec_axis(~ . / scaling_factor, name = "Alpha Diversity", breaks = seq(0, 1.5, by = 0.1))) +
  xlab("Transfer") + ylab("Mean abundance") + theme_bw() + 
  ggtitle("M3: dGMM + LAB") +
  theme(axis.text = element_text(size = 14),
        axis.title = element_text(size = 16),
        axis.text.y.right = element_text(size = 14),
        axis.title.y.right = element_text(vjust = 1.2),
        legend.position = "right",
        legend.text = element_text(size = 12))




#Medium 8
alpha_div_mean <- subset(TrA0_mean_abundances_M8_T, Species == "Alpha_diversity")
alpha_div_sd <- subset(TrA0_sd_abundances_M8_T, Species == "Alpha_diversity")

alpha_div_data <- merge(alpha_div_mean, alpha_div_sd, by = c("Transfer", "Species"))

# Calculate the scaling factor
scaling_factor <- 1 / 1.85 # Here, 100 is the range of the primary axis and 1.85 is the range of the secondary axis

TrA0_mean_abundances_M8_t$Species <- gsub("_", " ", TrA0_mean_abundances_M8_t$Species)

#Make the plot

ggplot() +
  geom_bar(data = TrA0_mean_abundances_M8_t, aes(x = as.numeric(Transfer), y = mean_rel_abundance, fill = Species), stat = "identity") +
  geom_point(data = alpha_div_data, aes(x = as.numeric(Transfer), y = mean_rel_abundance * scaling_factor), size = 3, shape = 21, color = "black") +
  geom_errorbar(data = alpha_div_data, 
                aes(x = as.numeric(Transfer),
                    ymin = (mean_rel_abundance - sd_rel_abundance) * scaling_factor, 
                    ymax = (mean_rel_abundance + sd_rel_abundance) * scaling_factor), 
                width = 0.2, color = "black") +
  scale_fill_manual(values=c("black", "#56B4E9", "magenta", "green", 
                                    "#0072B2", "indianred", "gold1", "#FDEFB2","#009E73", 
                                    "chocolate1","cyan", "red", "lightgrey", "darkorchid1",
                                    "mediumpurple", "aquamarine","darkgreen", 
                                    "lightblue", "tan3", "#00AFBB", "red3")) +
                                      scale_x_continuous(breaks=c(1,2,3,4,5,6,7,8,9)) +
  scale_y_continuous(limits = c(0, 1.05), sec.axis = sec_axis(~ . / scaling_factor, name = "Alpha Diversity", breaks = seq(0, 1.8, by = 0.1))) +
  xlab("Transfer") + ylab("Mean abundance") + theme_bw() + 
  ggtitle("M8: dGMM + LAB + mucin") + 
  theme(axis.text = element_text(size = 14),
        axis.title = element_text(size = 16),
        axis.text.y.right = element_text(size = 14),
        axis.title.y.right = element_text(vjust = 1.2),
        legend.position = "right",
        legend.text = element_text(size = 12)) 




##Scatter: merge TrA0_mean_abundances_M8_t and TrA0_mean_abundances_M3_t
TrA0_mean_abundances_M3_t$Medium <- 3
TrA0_mean_abundances_M8_t$Medium <- 8

#Keep endpoint data only
TrA0_mean_abundances_M3_t1<- subset(TrA0_mean_abundances_M3_t, Transfer == 9)[, c(2:3)]
TrA0_mean_abundances_M8_t1<- subset(TrA0_mean_abundances_M8_t, Transfer == 9)[, c(2:3)]

TrA0_sd_abundances_M3_T1 <- subset(TrA0_sd_abundances_M3_T, Transfer == 9, Species != "Alpha_diversity")[, c(2:3)]
TrA0_sd_abundances_M8_T1 <- subset(TrA0_sd_abundances_M8_T, Transfer == 9, Species != "Alpha_diversity")[, c(2:3)]

TrA0_sd_abundances_M3_T1$Species <- gsub("_", " ", TrA0_sd_abundances_M3_T1$Species)
TrA0_sd_abundances_M8_T1$Species <- gsub("_", " ", TrA0_sd_abundances_M8_T1$Species)

##Merge with corresponding sd info:
TrA0_mean_abundances_M8_t2 <- TrA0_mean_abundances_M8_t1 %>%
  left_join(TrA0_sd_abundances_M8_T1, by = "Species")
TrA0_mean_abundances_M3_t2 <- TrA0_mean_abundances_M3_t1 %>%
  left_join(TrA0_sd_abundances_M8_T1, by = "Species")

TrA0_mean_abundances_M3_t2$Medium <- 3
TrA0_mean_abundances_M8_t2$Medium <- 8

TrA0_mean_abundances_combined <- rbind(TrA0_mean_abundances_M3_t2, TrA0_mean_abundances_M8_t2)




#Filter out species that have 0 mean_rel_abundance in both Medium 3 and Medium 8
nonzero_species <- TrA0_mean_abundances_combined %>%
  dplyr::group_by(Species) %>%
  filter(any(mean_rel_abundance[Medium == 3] != 0) | any(mean_rel_abundance[Medium == 8] != 0))

#Reshape the data to wide format with mean and sd for both mediums
wide_data <- nonzero_species %>%
  pivot_wider(names_from = Medium, values_from = c(mean_rel_abundance, sd_rel_abundance)) %>%
  dplyr::rename(Mean3 = mean_rel_abundance_3, Mean8 = mean_rel_abundance_8,
         SD3 = sd_rel_abundance_3, SD8 = sd_rel_abundance_8)

colours_TrA0 <- c("steelblue4", "#E31A1C", "forestgreen", "#FF7F00", "black", "gold1", "skyblue", "#FB9A99", "palegreen2", "blue1", "#FDBF6F", "gray70", "#6C0BA9", "maroon", "orchid1", "deeppink1", "blue4", "slategray3")


wide_data1 <- wide_data %>%
  dplyr::mutate(SD3 = ifelse(is.na(SD3), 0, SD3),
                SD8 = ifelse(is.na(SD8), 0, SD8),
                Mean3 = ifelse(is.na(Mean3), 0, Mean3))

# Create the scatterplot with ggplot2
ggplot(wide_data1, aes(x = (Mean3 + 0.0001), y = (Mean8 + 0.0001))) +
  geom_point(aes(colour = Species), size =5, alpha = 0.7) +
  geom_errorbar(aes(ymin = (Mean8+0.0001) - SD8, ymax = (Mean8 + 0.0001) + SD8), width = 0.2, alpha = 0.6) +
  geom_errorbarh(aes(xmin =(Mean3+ 0.0001) - SD3, xmax = (Mean3 + 0.0001) + SD3), height = 0.2, alpha = 0.6) +
  geom_abline(slope = 1, linetype = "dashed", alpha = 0.5) +
  scale_colour_manual(values = colours_TrA0) +
  labs(x = "Log10(Mean Relative Abundance in M3 + 0.0001)",
       y = "Log10(Mean Relative Abundance in M8 + 0.0001)") +
  scale_x_log10() +
  scale_y_log10() +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(color = "black"),
    axis.ticks = element_line(color = "black")
  ) 



##Plotting Bray-Curtis Dissimilarity over Time
#First; extract the inoculum replicates only

View(TrA0_relative_abundance)
TrA0_relative_abundance_table_inoculum <- TrA0_relative_abundance[, c(1,2,25:27)]

## NT5028	 s__Bifidobacterium longum subsp. longum and NT5023	 s__Bifidobacterium longum subsp. infantis were indistinguishable by their 16S
## Hence, will need to be renamed to "s__Bifidobacterium longum spp."
TrA0_relative_abundance_table_inoculum <- TrA0_relative_abundance_table_inoculum %>%
  mutate(
    Name = ifelse(Name == 's__Bifidobacterium longum subsp. infantis', 's__Bifidobacterium longum spp.', Name),
    nid = ifelse(nid == 'NT5023', 'NT5023/NT5028', nid)
  )


##Clean up names of species (getting rid of square brackets and the species taxonomy delineation 's__')

# Remove 's__' from the beginning of each label in the "Name" column
TrA0_relative_abundance_table_inoculum$Name <- gsub("^s__", "", TrA0_relative_abundance_table_inoculum$Name)

# Remove square brackets from the labels in the "Name" column
TrA0_relative_abundance_table_inoculum$Name <- gsub("\\[|\\]", "", TrA0_relative_abundance_table_inoculum$Name)

# Prepare dataframe for transposing
TrA0_relative_abundance_table_inoculum$Name <- gsub(" ", "_", TrA0_relative_abundance_table_inoculum$Name)

TrA0_relative_abundance_table_t_inoculum<-TrA0_relative_abundance_table_inoculum[, c(2:5)]

#Transpose using tidyr

# First, pivot the dataframe to long format, excluding the first column ("Name")
long_format_TrA0_inoculum <- pivot_longer(
  TrA0_relative_abundance_table_t_inoculum,
  cols = -Name,
  names_to = "Code",
  values_to = "Value"
)

# Then, pivot the long format dataframe to wide format using "Name" as the new column names
TrA0_relative_abundance_table_T_inoculum <- pivot_wider(
  long_format_TrA0_inoculum,
  names_from = Name,
  values_from = Value
)


##Add a replicate column:
TrA0_relative_abundance_table_T_inoculum <- TrA0_relative_abundance_table_T_inoculum %>%
  mutate(Replicate = case_when(
    Code == 'TrA0_InoculationMix1' ~ '1',
    Code == 'TrA0_InoculationMix2' ~ '2',
    Code == 'TrA0_InoculationMix3' ~ '3'
  ))

##Copy for each Medium so it becomes mergable with the respective TrA0_relative_abundance_table_T 
medium_levels <- c('3', '8')

#Replicating the existing rows for each new level of 'Medium'
TrA0_relative_abundance_table_T_inoculum_expanded <- TrA0_relative_abundance_table_T_inoculum %>%
  slice(rep(1:n(), each = length(medium_levels))) %>%
  mutate(Medium = rep(medium_levels, times = nrow(TrA0_relative_abundance_table_T_inoculum)))

#Add a value to "Transfer" and "Alpha_diversity" for mergability with TrA0_relative_abundance_table_T 
TrA0_relative_abundance_table_T_inoculum_expanded  <- TrA0_relative_abundance_table_T_inoculum_expanded  %>%
  mutate(Transfer = 0)

TrA0_relative_abundance_table_T_inoculum_expanded  <- TrA0_relative_abundance_table_T_inoculum_expanded  %>%
  mutate(Alpha_diversity = NA)

TrA0_relative_abundance_table_T_inoculum_expanded$Medium <- as.factor(TrA0_relative_abundance_table_T_inoculum_expanded$Medium)
TrA0_relative_abundance_table_T_inoculum_expanded$Replicate <- as.factor(TrA0_relative_abundance_table_T_inoculum_expanded$Replicate)

TrA0_relative_abundance_table_T$Medium <- as.factor(TrA0_relative_abundance_table_T$Medium)
TrA0_relative_abundance_table_T$Replicate <- as.factor(TrA0_relative_abundance_table_T$Replicate)


#Merge
TrA0_df1 <- TrA0_relative_abundance_table_T_inoculum_expanded
TrA0_df2 <- TrA0_relative_abundance_table_T

#Matching the column order of df1 to df2
TrA0_df1 <- TrA0_df1[ names(TrA0_df2) ]

#Merging the data frames
merged_df_TrA0 <- bind_rows(TrA0_df1, TrA0_df2)

#Checking the structure of the merged data frame
str(merged_df_TrA0)
#take out alpha div column as it is not relevant for the next analysis
merged_df_TrA0 <- merged_df_TrA0[, c(1:32,34:36)]

#Define species columns, assuming they are from the 2nd to the 32nd column
#species_columns <- names(TrA0_relative_abundance_table_T)[2:32]
species_columns <- names(merged_df_TrA0)[2:32]

#Initialise an empty data frame to store Bray-Curtis dissimilarities
dissimilarities <- data.frame()

#Calculate Bray-Curtis dissimilarity for each combination of Replicate and Medium
dissimilarities <- merged_df_TrA0 %>%
  dplyr::group_by(Medium, Replicate) %>%
  arrange(Transfer) %>%
  do({
    data <- .
    #Initialise an empty vector to store dissimilarities
    diss_vector <- numeric(nrow(data) - 1)
    for (i in 1:(nrow(data) - 1)) {
      # Calculate the dissimilarity between row i and row i+1
      diss_vector[i] <- vegdist(rbind(data[species_columns][i, , drop = FALSE], 
                                      data[species_columns][i + 1, , drop = FALSE]), 
                                method = "bray")
    }
    #Return a df with the calculated dissimilarities
    data.frame(Transfer = head(data$Transfer, -1), Dissimilarity = diss_vector)
  }) %>%
  ungroup()


#Create a color mapping for the two growth media compared
color_map <- c('3' = 'firebrick4', '8' = 'red')

std_dev_df <- dissimilarities %>%
  dplyr::group_by(Transfer, Medium) %>%
  dplyr::summarize(Mean = mean(Dissimilarity),
                   StdDev = sd(Dissimilarity),
                   StdErr = StdDev / sqrt(n())) %>%
  ungroup()

ggplot() +
  geom_ribbon(data = std_dev_df, aes(x = Transfer, ymin = Mean - StdErr, ymax = Mean + StdErr, fill = Medium), alpha = 0.2) +
  geom_line(data = std_dev_df, aes(x = Transfer, y = Mean, color = Medium, group = Medium), linetype = "dashed") +
  scale_color_manual(values = color_map) +
  scale_fill_manual(values = color_map) +
  theme_minimal() +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.background = element_blank(),
    axis.line = element_line(color = "black"),
    axis.ticks = element_line(color = "black")
  ) +
  #labs(x = "Transfer", y = "Bray-Curtis Dissimilarity", title = "Bray-Curtis Dissimilarity Between Subsequent Transfers", color = "Medium", fill = "Medium") +
  labs(x = "Transfer", y = "Bray-Curtis Dissimilarity", color = "Medium", fill = "Medium") +
  theme(legend.position = "right")
